#!/usr/local/bin/python
#!/opt/python/bin/python
# Python script to run test plans

#Import modules
import sys,pexpect,time,getpass,os,traceback,select,termios,tty,datetime,argparse,re,base64
hosts = []

def ssh_command (ipaddr, username, password):
        #Create SSH connection to device
        child = pexpect.spawn ('ssh ' + username + '@' + ipaddr)
        child.timeout=300
        child.maxread=4000
        i = child.expect([pexpect.TIMEOUT, 'Are you sure you want to continue connecting', '[a-zA-Z]+:\s'],  timeout=5)
        if i == 0: # Timeout
                die(child, 'ERROR!\nSSH could not login. Here is what SSH said:')
        elif i == 1: # SSH does not have the public key. Just accept it.
                child.sendline ('yes')
                time.sleep(1)
                child.expect([pexpect.TIMEOUT, '[a-zA-Z]+:\s'])
                child.sendline(password)
                return child
        elif i == 2: #Login
                child.sendline(password)
                return child


def die(child, errstr):
                #print child.before, child.after
                print 'ERROR!\nSorry an error has occured, Please try again'
                print errstr
                print child.before, child.after
                child.terminate()
                exit(1)

def getmenu():
                old_settings = termios.tcgetattr(sys.stdin)
                tty.setraw(sys.stdin.fileno())
                select.select([sys.stdin], [], [], 0)
                answer = sys.stdin.read(1)
                termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
                return answer
def main (args):

        banner("Test Plan Script Version 1.0 by Nathan Booth")
        banner("Please let me know if you find any bugs", ch='#')
        banner("")

        try:
                query = args.query
                if not query:
                        print "You didn't specify a device"
                        query = raw_input('Device: ')
                findhost (query)
                hostname = hosts[0][0].upper()
                "hostname.upper()
                ipaddr = hosts [0][1]
        except Exception, e:
                print str(e)
                traceback.print_exc()
                os._exit(1)

        now = datetime.datetime.now()
        date = now.strftime("%Y_%m_%d_%H_%M")
        username = base64.b64decode("YW5t")
        password = base64.b64decode("YXBwbGVz")
        changenum = raw_input('Change Number: ')
        changenum = changenum.replace(':','')

        print """Which test plan would you like to run? e.g. type 1
        1) UKW-MBE-6301m - Standard Test Plan for Layer 2 Switch Changes
        2) UKD-MBA-2380  - Standard Test Plan for HIS ACE Changes
        3) UKW-MBE-6301f - Standard Test Plan for Internet Changes
        4) UKW-MBE-6301g - Standard Test Plan for Shared MPLS Changes
        5) UKW-MBE-6301h - Standard Test Plan for Shared Access Changes
        6) UKW-MBE-6301n - Standard Test Plan for Zone PE Changes"""
        answer = raw_input('Which test plan? ')

        if "1" in answer:
                test = 1
        elif "2" in answer:
                test = 2
        elif "3" in answer:
                test = 3
        elif "4" in answer:
                test = 4
        elif "5" in answer:
                test = 5
        elif "6" in answer:
                test = 6
        elif "" in answer:
                print ("Sorry, invalid input")
                os._exit(1)
        child = ssh_command (ipaddr, username, password)

        i = child.expect([pexpect.TIMEOUT, pexpect.EOF, '[a-zA-Z]+:\s{4,}', '[a-zA-Z0-9-/]+#'])
        if i == 0:
                die(child, 'ERROR!\nSSH timed out. Here is what SSH said:')
        elif i == 1:
                die(child, 'ERROR!\nSSH timed out. Here is what SSH said:')
        elif i == 2:
                die(child, 'ERROR!\nIncorrect password Here is what SSH said:')
        elif i == 3:
                #Log output to a file named after device connected to
                directory = '/var/www/html/testoutputs/' + hostname
                if not os.path.exists(directory):
                        os.makedirs(directory)
                filename = '/var/www/html/testoutputs/' + hostname + '/' hostname + '-' + date + '-' + changenum + '-TESTPLAN-OUTPUT.TXT'
                url = 'http://156.150.222.39/testoutputs/' + hostname + '/' hostname + '-' + date + '-' + changenum + '-TESTPLAN-OUTPUT.TXT'
                fout = file(filename,'w')
                child.logfile_read = fout
                fout.write('################## Outputs generated by Test Plan Script v1.0 ##################\n')
                fout.write('################## Outputs for change '+ changenum + ' generated at ' + now.strftime("%H:%M %d/%m/%Y") +'##################\n')
                print '#Logging in to ' + hostname
                child.sendcontrol('m')
                child.expect ('[a-zA-Z0-9-]+#')
                child.sendline ('term len 0')
                child.expect ('[a-zA-Z0-9-]+#')
                tests (test, child)
                print '#Output complete log saved as:\n\n' + url + '\n\nVisit this URL to view the output'
                child.sendcontrol('m')
                fout.write('\n################## Outputs generated by Test Plan Script v1.0 ##################')
                child.sendline ('exit')
                child.close ()

def tests (test, child):
        if test == 1:
                print '#UKW-MBE-6301m - Standard Test Plan for Layer 2 Switch Changes'
                print '#Running outputs, please wait until output complete message!'
                commands = ['show logging','show processes cpu history','show ip interface brief','show interface','show interface status','show spanning-tree','show spanning-tree summary','show vlan','show run']
                for command in commands:
                        child.sendline (command)
                        child.expect ('[a-zA-Z0-9-]+#$')
                return child
        if test == 2:
                print '#UKD-MBA-2380  - Standard Test Plan for HIS ACE Change'
                print '#Running outputs, please wait until output complete message!'
                commands = ['show logging','show rserver','show serverfarm','show crypto files','show interface','show ft group status','show ft group brief','show service-policy','show running-config']
                for command in commands:
                        child.sendline (command)
                        child.expect ('[a-zA-Z0-9-]+#$')
                return child
        if test == 3:
                print '#UKW-MBE-6301f - Standard Test Plan for Internet Changes'
                print '#Note: Please also run additional manual checks as documented in the Test Plan'
                print '#Running outputs, please wait until output complete message!'
                commands = ['show logging','show processes cpu history','show ip interface brief','show ip route','show standby brief','show ip bgp neighbors 207.136.166.137','show ip bgp neighbors 158.43.23.57','show ip bgp sum','show ip ospf neighbors','show running-config']
                for command in commands:
                        child.sendline (command)
                        child.expect ('[a-zA-Z0-9-]+#$')
                return child
        if test == 4:
                print '#UKW-MBE-6301g - Standard Test Plan for Shared MPLS Changes'
                print '#Running outputs, please wait until output complete message!'
                commands = ['show logging','show processes cpu history','show ip interface brief','show standby brief','show ip vrf','show interfaces','show ip route vrf *','show bgp vpnv4 unicast all','show bgp vpnv4 unicast all summary','show running-config']
                for command in commands:
                        child.sendline (command)
                        child.expect ('[a-zA-Z0-9-]+#$')
                return child
        if test == 5:
                print '#UKW-MBE-6301h - Standard Test Plan for Shared Access Change'
                print '#Running outputs, please wait until output complete message!'
                commands = ['show logging','show processes cpu history','show ip interface brief','show standby brief','show ip vrf','show interfaces','show ip route vrf *','show bgp vpnv4 unicast all','show bgp vpnv4 unicast all summary','show running-config']
                for command in commands:
                        child.sendline (command)
                        child.expect ('[a-zA-Z0-9-]+#$')
                return child
        if test == 6:
                print '#UKW-MBE-6301n - Standard Test Plan for Zone PE Changes'
                print '#Running outputs, please wait until output complete message!'
                commands = ['terminal length 0','show logging','show processes cpu history','show ip interface brief','show interface','show interface status','show etherchannel summary','show spanning-tree','show spanning-tree summary','show vlan','show vrf','show ip route vrf *','show bgp all','show standby brief','show mpls l2transport vc','show switch virtual redundancy','show running-config']
                for command in commands:
                        child.sendline (command)
                        child.expect ('[a-zA-Z0-9-]+#$')
                return child
        else:
                print '#No Testplan run'
                return child

def findhost (query):
        results = 0
        while results != 1:
                with open('/etc/myhosts','r') as f:
                        for line in f:
                                if not line.startswith('#'):
                                        line = line.replace("   ", " ")
                                        line = line.rstrip()
                                        if not line : continue
                                        split =  line.split(' ',5)
                                        querystring = r"^" + query
                                        search = re.match(querystring,split[0], re.IGNORECASE)
                                        if search:
                                                host = split[0]
                                                ip = split[1]
                                                hosts.append([host,ip])
                                                results += 1
                if results == 0:
                        query = raw_input('Sorry device not found, try again:')
                if results > 1:
                        for item in hosts:
                                print item[0] + "                               " + item[1]
                        query = raw_input('Which device where you looking for??')
                        hosts[:] = []
                        results = 0
        return hosts

def banner(text, ch='=', length=78):
        spaced_text = ' %s ' % text
        banner = spaced_text.center(length, ch)
        print banner
        return banner

if __name__ == '__main__':
                parser = argparse.ArgumentParser()
                parser.add_argument('query', nargs='?', help="Please specifiy a host" )
                args = parser.parse_args()
                try:
                        main(args)
                except (KeyboardInterrupt, SystemExit):
                        print '\n'
                        banner("Oh ok :'( Bye then.........", ch='#')
                except Exception, e:
                        print '\n'
                        banner("Whoops, Something broke, Please send this output to Nathan to fix the bug.", ch='#')
                        print str(e)
                        traceback.print_exc()
                        os._exit(1)

